; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\Users\michalis\Documents\Visual Studio 2015\Projects\MeOS\MeOS\AHCI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG3266	DB	'SLOT_ERROR', 0aH, 00H
$SG3268	DB	'SPIN ERROR', 0aH, 00H
$SG3271	DB	'TASK ERROR', 0aH, 00H
$SG3273	DB	'ERROR', 0aH, 00H
	ORG $+1
$SG3318	DB	'SLOT_ERROR', 0aH, 00H
$SG3320	DB	'SPIN ERROR', 0aH, 00H
$SG3323	DB	'TASK ERROR', 0aH, 00H
$SG3325	DB	'ERROR', 0aH, 00H
	ORG $+1
$SG3326	DB	'successful end of write', 0aH, 00H
	ORG $+3
$SG3369	DB	'SLOT_ERROR', 0aH, 00H
$SG3371	DB	'SPIN ERROR', 0aH, 00H
$SG3374	DB	'TASK ERROR', 0aH, 00H
$SG3376	DB	'ERROR', 0aH, 00H
	ORG $+1
$SG3400	DB	'AHCI controller version: %u.%u', 0aH, 00H
$SG3401	DB	'Ports implemented: ', 00H
$SG3403	DB	'%u ', 00H
$SG3404	DB	0aH, 00H
	ORG $+2
$SG3405	DB	'Number of ports: %u', 0aH, 00H
	ORG $+3
$SG3406	DB	'Number of command slots: %u', 0aH, 00H
	ORG $+3
$SG3409	DB	'Controller supports only AHCI mode', 0aH, 00H
$SG3410	DB	'Controller implements in addition to AHCI legacy interfa'
	DB	'ce', 0aH, 00H
$SG3412	DB	'Generation 1: 1.5 Gbps', 0aH, 00H
$SG3414	DB	'Generation 2: 3 Gbps', 0aH, 00H
	ORG $+2
$SG3416	DB	'Generation 3: 6 Gbps', 0aH, 00H
	ORG $+2
$SG3418	DB	'Error in controller generation', 0aH, 00H
$SG3421	DB	'Drive supports LED to indicate activity', 0aH, 00H
	ORG $+3
$SG3422	DB	'No LED to indicate activity found', 0aH, 00H
	ORG $+1
$SG3425	DB	'Controller supports 64-bit addressing', 0aH, 00H
	ORG $+1
$SG3426	DB	'Controller supports only 32-bit addressing', 0aH, 00H
CONST	ENDS
PUBLIC	??0AHCI_Controller@@QAE@XZ			; AHCI_Controller::AHCI_Controller
PUBLIC	??0AHCI_Controller@@QAE@PCUHBA_MEM_struct@@@Z	; AHCI_Controller::AHCI_Controller
PUBLIC	?port_rebase@AHCI_Controller@@QAEXE@Z		; AHCI_Controller::port_rebase
PUBLIC	?Read@AHCI_Controller@@QAE?AW4AHCIResult@@EIIIPAX@Z ; AHCI_Controller::Read
PUBLIC	?Write@AHCI_Controller@@QAE?AW4AHCIResult@@EIIIPAX@Z ; AHCI_Controller::Write
PUBLIC	?SendIdentify@AHCI_Controller@@QAE?AW4AHCIResult@@EPAX@Z ; AHCI_Controller::SendIdentify
PUBLIC	?get_bit@AHCI_Controller@@QAEIII@Z		; AHCI_Controller::get_bit
PUBLIC	?set_bit@AHCI_Controller@@QAEXII@Z		; AHCI_Controller::set_bit
PUBLIC	?is_port_implemented@AHCI_Controller@@QAE_NE@Z	; AHCI_Controller::is_port_implemented
PUBLIC	?print_caps@AHCI_Controller@@QAEXXZ		; AHCI_Controller::print_caps
PUBLIC	?HardReset@AHCI_Controller@@QAEXXZ		; AHCI_Controller::HardReset
PUBLIC	?Enable@AHCI_Controller@@QAEXXZ			; AHCI_Controller::Enable
PUBLIC	?start_cmd@AHCI_Controller@@QAEXPCUHBA_PORT_struct@@@Z ; AHCI_Controller::start_cmd
PUBLIC	?stop_cmd@AHCI_Controller@@QAEXPCUHBA_PORT_struct@@@Z ; AHCI_Controller::stop_cmd
PUBLIC	?find_empty_slot@AHCI_Controller@@QAEHPCUHBA_PORT_struct@@@Z ; AHCI_Controller::find_empty_slot
EXTRN	_ClearScreen:PROC
EXTRN	_printf:PROC
EXTRN	_memset:PROC
EXTRN	??0Timer@@QAE@XZ:PROC				; Timer::Timer
EXTRN	?Restart@Timer@@QAEIXZ:PROC			; Timer::Restart
EXTRN	?GetElapsedMillis@Timer@@QAEIXZ:PROC		; Timer::GetElapsedMillis
EXTRN	?ab@@3PCUHBA_MEM_struct@@C:DWORD		; ab
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -12						; size = 4
_slots$ = -8						; size = 4
_i$1 = -4						; size = 4
_port$ = 8						; size = 4
?find_empty_slot@AHCI_Controller@@QAEHPCUHBA_PORT_struct@@@Z PROC ; AHCI_Controller::find_empty_slot
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 275
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _port$[ebp]
	or	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR _slots$[ebp], ecx
; Line 277
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@find_empty
$LN2@find_empty:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@find_empty:
	cmp	DWORD PTR _i$1[ebp], 5
	jge	SHORT $LN3@find_empty
; Line 279
	mov	ecx, DWORD PTR _slots$[ebp]
	and	ecx, 1
	jne	SHORT $LN5@find_empty
	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN1@find_empty
$LN5@find_empty:
; Line 280
	mov	edx, DWORD PTR _slots$[ebp]
	shr	edx, 1
	mov	DWORD PTR _slots$[ebp], edx
; Line 281
	jmp	SHORT $LN2@find_empty
$LN3@find_empty:
; Line 283
	or	eax, -1
$LN1@find_empty:
; Line 284
	mov	esp, ebp
	pop	ebp
	ret	4
?find_empty_slot@AHCI_Controller@@QAEHPCUHBA_PORT_struct@@@Z ENDP ; AHCI_Controller::find_empty_slot
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = -4						; size = 4
_port$ = 8						; size = 4
?stop_cmd@AHCI_Controller@@QAEXPCUHBA_PORT_struct@@@Z PROC ; AHCI_Controller::stop_cmd
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 30
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 32
	lea	ecx, DWORD PTR _t$[ebp]
	call	??0Timer@@QAE@XZ			; Timer::Timer
$LN2@stop_cmd:
; Line 33
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 32768				; 00008000H
	cmp	ecx, 1
	jne	SHORT $LN3@stop_cmd
	lea	ecx, DWORD PTR _t$[ebp]
	call	?GetElapsedMillis@Timer@@QAEIXZ		; Timer::GetElapsedMillis
	cmp	eax, 500				; 000001f4H
	ja	SHORT $LN3@stop_cmd
	jmp	SHORT $LN2@stop_cmd
$LN3@stop_cmd:
; Line 36
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, -32				; ffffffe0H
	mov	ecx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 38
	lea	ecx, DWORD PTR _t$[ebp]
	call	?Restart@Timer@@QAEIXZ			; Timer::Restart
$LN4@stop_cmd:
; Line 39
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 16384				; 00004000H
	cmp	eax, 1
	jne	SHORT $LN1@stop_cmd
	lea	ecx, DWORD PTR _t$[ebp]
	call	?GetElapsedMillis@Timer@@QAEIXZ		; Timer::GetElapsedMillis
	cmp	eax, 500				; 000001f4H
	ja	SHORT $LN1@stop_cmd
	jmp	SHORT $LN4@stop_cmd
$LN1@stop_cmd:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	4
?stop_cmd@AHCI_Controller@@QAEXPCUHBA_PORT_struct@@@Z ENDP ; AHCI_Controller::stop_cmd
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = -4						; size = 4
_port$ = 8						; size = 4
?start_cmd@AHCI_Controller@@QAEXPCUHBA_PORT_struct@@@Z PROC ; AHCI_Controller::start_cmd
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 16
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 18
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 20
	lea	ecx, DWORD PTR _t$[ebp]
	call	??0Timer@@QAE@XZ			; Timer::Timer
$LN2@start_cmd:
; Line 21
	lea	ecx, DWORD PTR _t$[ebp]
	call	?GetElapsedMillis@Timer@@QAEIXZ		; Timer::GetElapsedMillis
	cmp	eax, 500				; 000001f4H
	ja	SHORT $LN4@start_cmd
	jmp	SHORT $LN2@start_cmd
$LN4@start_cmd:
; Line 23
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 128				; 00000080H
	cmp	ecx, 1
	je	SHORT $LN6@start_cmd
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 8
	cmp	eax, 1
	je	SHORT $LN6@start_cmd
	mov	ecx, DWORD PTR _port$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 15					; 0000000fH
	cmp	edx, 3
	je	SHORT $LN5@start_cmd
$LN6@start_cmd:
	jmp	SHORT $LN4@start_cmd
$LN5@start_cmd:
; Line 24
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 1
	mov	edx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 25
	mov	esp, ebp
	pop	ebp
	ret	4
?start_cmd@AHCI_Controller@@QAEXPCUHBA_PORT_struct@@@Z ENDP ; AHCI_Controller::start_cmd
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enable@AHCI_Controller@@QAEXXZ PROC			; AHCI_Controller::Enable
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 50
	mov	esp, ebp
	pop	ebp
	ret	0
?Enable@AHCI_Controller@@QAEXXZ ENDP			; AHCI_Controller::Enable
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HardReset@AHCI_Controller@@QAEXXZ PROC			; AHCI_Controller::HardReset
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 44
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	or	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
; Line 45
	mov	esp, ebp
	pop	ebp
	ret	0
?HardReset@AHCI_Controller@@QAEXXZ ENDP			; AHCI_Controller::HardReset
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
tv163 = -12						; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?print_caps@AHCI_Controller@@QAEXXZ PROC		; AHCI_Controller::print_caps
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 383
	call	_ClearScreen
; Line 385
	push	255					; 000000ffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_bit@AHCI_Controller@@QAEIII@Z	; AHCI_Controller::get_bit
	push	eax
	push	16711680				; 00ff0000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_bit@AHCI_Controller@@QAEIII@Z	; AHCI_Controller::get_bit
	shr	eax, 16					; 00000010H
	push	eax
	push	OFFSET $SG3400
	call	_printf
	add	esp, 12					; 0000000cH
; Line 386
	push	OFFSET $SG3401
	call	_printf
	add	esp, 4
; Line 387
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@print_caps
$LN2@print_caps:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@print_caps:
	cmp	DWORD PTR _i$1[ebp], 32			; 00000020H
	jae	SHORT $LN3@print_caps
; Line 388
	movzx	ecx, BYTE PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?is_port_implemented@AHCI_Controller@@QAE_NE@Z ; AHCI_Controller::is_port_implemented
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@print_caps
; Line 389
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	push	OFFSET $SG3403
	call	_printf
	add	esp, 8
$LN7@print_caps:
; Line 391
	jmp	SHORT $LN2@print_caps
$LN3@print_caps:
	push	OFFSET $SG3404
	call	_printf
	add	esp, 4
; Line 393
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_bit@AHCI_Controller@@QAEIII@Z	; AHCI_Controller::get_bit
	add	eax, 1
	push	eax
	push	OFFSET $SG3405
	call	_printf
	add	esp, 8
; Line 394
	push	3840					; 00000f00H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_bit@AHCI_Controller@@QAEIII@Z	; AHCI_Controller::get_bit
	shr	eax, 8
	push	eax
	push	OFFSET $SG3406
	call	_printf
	add	esp, 8
; Line 396
	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_bit@AHCI_Controller@@QAEIII@Z	; AHCI_Controller::get_bit
	test	eax, eax
	je	SHORT $LN8@print_caps
; Line 397
	push	OFFSET $SG3409
	call	_printf
	add	esp, 4
; Line 398
	jmp	SHORT $LN9@print_caps
$LN8@print_caps:
; Line 399
	push	OFFSET $SG3410
	call	_printf
	add	esp, 4
$LN9@print_caps:
; Line 401
	push	15728640				; 00f00000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_bit@AHCI_Controller@@QAEIII@Z	; AHCI_Controller::get_bit
	shr	eax, 20					; 00000014H
	mov	DWORD PTR tv163[ebp], eax
	cmp	DWORD PTR tv163[ebp], 1
	je	SHORT $LN10@print_caps
	cmp	DWORD PTR tv163[ebp], 2
	je	SHORT $LN11@print_caps
	cmp	DWORD PTR tv163[ebp], 3
	je	SHORT $LN12@print_caps
	jmp	SHORT $LN13@print_caps
$LN10@print_caps:
; Line 403
	push	OFFSET $SG3412
	call	_printf
	add	esp, 4
	jmp	SHORT $LN5@print_caps
$LN11@print_caps:
; Line 404
	push	OFFSET $SG3414
	call	_printf
	add	esp, 4
	jmp	SHORT $LN5@print_caps
$LN12@print_caps:
; Line 405
	push	OFFSET $SG3416
	call	_printf
	add	esp, 4
	jmp	SHORT $LN5@print_caps
$LN13@print_caps:
; Line 406
	push	OFFSET $SG3418
	call	_printf
	add	esp, 4
$LN5@print_caps:
; Line 409
	push	33554432				; 02000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_bit@AHCI_Controller@@QAEIII@Z	; AHCI_Controller::get_bit
	test	eax, eax
	je	SHORT $LN14@print_caps
; Line 410
	push	OFFSET $SG3421
	call	_printf
	add	esp, 4
; Line 411
	jmp	SHORT $LN15@print_caps
$LN14@print_caps:
; Line 412
	push	OFFSET $SG3422
	call	_printf
	add	esp, 4
$LN15@print_caps:
; Line 414
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_bit@AHCI_Controller@@QAEIII@Z	; AHCI_Controller::get_bit
	test	eax, eax
	je	SHORT $LN16@print_caps
; Line 415
	push	OFFSET $SG3425
	call	_printf
	add	esp, 4
; Line 416
	jmp	SHORT $LN1@print_caps
$LN16@print_caps:
; Line 417
	push	OFFSET $SG3426
	call	_printf
	add	esp, 4
$LN1@print_caps:
; Line 418
	mov	esp, ebp
	pop	ebp
	ret	0
?print_caps@AHCI_Controller@@QAEXXZ ENDP		; AHCI_Controller::print_caps
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv71 = -1						; size = 1
_port$ = 8						; size = 1
?is_port_implemented@AHCI_Controller@@QAE_NE@Z PROC	; AHCI_Controller::is_port_implemented
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 367
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 368
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	movzx	ecx, BYTE PTR _port$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR [edx+12]
	and	ecx, eax
	je	SHORT $LN3@is_port_im
	mov	BYTE PTR tv71[ebp], 1
	jmp	SHORT $LN4@is_port_im
$LN3@is_port_im:
	mov	BYTE PTR tv71[ebp], 0
$LN4@is_port_im:
	mov	al, BYTE PTR tv71[ebp]
; Line 369
	mov	esp, ebp
	pop	ebp
	ret	4
?is_port_implemented@AHCI_Controller@@QAE_NE@Z ENDP	; AHCI_Controller::is_port_implemented
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
_mask$ = 12						; size = 4
?set_bit@AHCI_Controller@@QAEXII@Z PROC			; AHCI_Controller::set_bit
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 377
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 378
	mov	eax, DWORD PTR _reg$[ebp]
	or	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _reg$[ebp], eax
; Line 379
	mov	esp, ebp
	pop	ebp
	ret	8
?set_bit@AHCI_Controller@@QAEXII@Z ENDP			; AHCI_Controller::set_bit
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
_mask$ = 12						; size = 4
?get_bit@AHCI_Controller@@QAEIII@Z PROC			; AHCI_Controller::get_bit
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 372
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 373
	mov	eax, DWORD PTR _reg$[ebp]
	and	eax, DWORD PTR _mask$[ebp]
; Line 374
	mov	esp, ebp
	pop	ebp
	ret	8
?get_bit@AHCI_Controller@@QAEIII@Z ENDP			; AHCI_Controller::get_bit
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -36						; size = 4
_slot$ = -32						; size = 4
_spin$ = -28						; size = 4
_buf$ = -24						; size = 4
_cmdfis$ = -20						; size = 4
_port$ = -16						; size = 4
_cmd$ = -12						; size = 4
_cmdtbl$ = -8						; size = 4
_i$ = -4						; size = 4
_port_num$ = 8						; size = 1
__buf$ = 12						; size = 4
?SendIdentify@AHCI_Controller@@QAE?AW4AHCIResult@@EPAX@Z PROC ; AHCI_Controller::SendIdentify
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx
; Line 288
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR _port_num$[ebp]
	shl	edx, 7
	lea	eax, DWORD PTR [ecx+edx+256]
	mov	DWORD PTR _port$[ebp], eax
; Line 289
	mov	ecx, DWORD PTR __buf$[ebp]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 291
	mov	edx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+16], -1
; Line 292
	mov	DWORD PTR _spin$[ebp], 0
; Line 294
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find_empty_slot@AHCI_Controller@@QAEHPCUHBA_PORT_struct@@@Z ; AHCI_Controller::find_empty_slot
	mov	DWORD PTR _slot$[ebp], eax
; Line 296
	cmp	DWORD PTR _slot$[ebp], -1
	jne	SHORT $LN9@SendIdenti
	push	OFFSET $SG3369
	call	_printf
	add	esp, 4
	mov	eax, 4
	jmp	$LN1@SendIdenti
$LN9@SendIdenti:
; Line 298
	mov	ecx, DWORD PTR _port$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cmd$[ebp], edx
; Line 299
	mov	eax, DWORD PTR _slot$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _cmd$[ebp], eax
; Line 300
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	dl, BYTE PTR [ecx]
	and	dl, 224					; 000000e0H
	or	dl, 5
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR [eax], dl
; Line 301
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	dl, BYTE PTR [ecx]
	and	dl, 191					; 000000bfH
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR [eax], dl
; Line 302
	mov	ecx, 1
	mov	edx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 304
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cmdtbl$[ebp], ecx
; Line 305
	mov	edx, DWORD PTR _cmd$[ebp]
	movzx	eax, WORD PTR [edx+2]
	sub	eax, 1
	shl	eax, 4
	add	eax, 144				; 00000090H
	push	eax
	push	0
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 309
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SendIdenti
$LN2@SendIdenti:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@SendIdenti:
	mov	eax, DWORD PTR _cmd$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	sub	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN3@SendIdenti
; Line 311
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+edx+128], ecx
; Line 312
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	ecx, DWORD PTR [eax+edx+140]
	and	ecx, -4194304				; ffc00000H
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [eax+edx+140], ecx
; Line 313
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	eax, DWORD PTR [edx+ecx+140]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [edx+ecx+140], eax
; Line 314
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 4096				; 00001000H
	mov	DWORD PTR _buf$[ebp], eax
; Line 315
	jmp	$LN2@SendIdenti
$LN3@SendIdenti:
; Line 317
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edx+ecx+128], eax
; Line 318
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	eax, DWORD PTR [edx+ecx+140]
	and	eax, -4194304				; ffc00000H
	or	eax, 512				; 00000200H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [edx+ecx+140], eax
; Line 319
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	edx, DWORD PTR [ecx+eax+140]
	or	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [ecx+eax+140], edx
; Line 322
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR _cmdfis$[ebp], edx
; Line 324
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [eax], 39			; 00000027H
; Line 325
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 326
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [ecx+2], 236			; 000000ecH
; Line 327
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [edx+7], 0
$LN5@SendIdenti:
; Line 330
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 136				; 00000088H
	je	SHORT $LN6@SendIdenti
	cmp	DWORD PTR _spin$[ebp], 1000000		; 000f4240H
	jge	SHORT $LN6@SendIdenti
; Line 332
	mov	edx, DWORD PTR _spin$[ebp]
	add	edx, 1
	mov	DWORD PTR _spin$[ebp], edx
; Line 333
	jmp	SHORT $LN5@SendIdenti
$LN6@SendIdenti:
; Line 334
	cmp	DWORD PTR _spin$[ebp], 1000000		; 000f4240H
	jne	SHORT $LN10@SendIdenti
; Line 336
	push	OFFSET $SG3371
	call	_printf
	add	esp, 4
; Line 337
	mov	eax, 5
	jmp	SHORT $LN1@SendIdenti
$LN10@SendIdenti:
; Line 340
	mov	eax, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN7@SendIdenti:
; Line 343
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN8@SendIdenti
; Line 347
	mov	eax, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _port$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	and	edx, eax
	jne	SHORT $LN11@SendIdenti
; Line 348
	jmp	SHORT $LN8@SendIdenti
$LN11@SendIdenti:
; Line 349
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1073741824				; 40000000H
	je	SHORT $LN12@SendIdenti
; Line 351
	push	OFFSET $SG3374
	call	_printf
	add	esp, 4
; Line 352
	mov	eax, 6
	jmp	SHORT $LN1@SendIdenti
$LN12@SendIdenti:
; Line 354
	jmp	SHORT $LN7@SendIdenti
$LN8@SendIdenti:
; Line 357
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN13@SendIdenti
; Line 359
	push	OFFSET $SG3376
	call	_printf
	add	esp, 4
; Line 360
	mov	eax, 6
	jmp	SHORT $LN1@SendIdenti
$LN13@SendIdenti:
; Line 363
	xor	eax, eax
$LN1@SendIdenti:
; Line 364
	mov	esp, ebp
	pop	ebp
	ret	8
?SendIdentify@AHCI_Controller@@QAE?AW4AHCIResult@@EPAX@Z ENDP ; AHCI_Controller::SendIdentify
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -36						; size = 4
_slot$ = -32						; size = 4
_spin$ = -28						; size = 4
_buf$ = -24						; size = 4
_port$ = -20						; size = 4
_cmd$ = -16						; size = 4
_cmdtbl$ = -12						; size = 4
_cmdfis$ = -8						; size = 4
_i$ = -4						; size = 4
_port_num$ = 8						; size = 1
_startl$ = 12						; size = 4
_starth$ = 16						; size = 4
_count$ = 20						; size = 4
__buf$ = 24						; size = 4
?Write@AHCI_Controller@@QAE?AW4AHCIResult@@EIIIPAX@Z PROC ; AHCI_Controller::Write
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx
; Line 182
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR _port_num$[ebp]
	shl	edx, 7
	lea	eax, DWORD PTR [ecx+edx+256]
	mov	DWORD PTR _port$[ebp], eax
; Line 183
	mov	ecx, DWORD PTR __buf$[ebp]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 185
	mov	edx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+16], -1
; Line 186
	mov	DWORD PTR _spin$[ebp], 0
; Line 188
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find_empty_slot@AHCI_Controller@@QAEHPCUHBA_PORT_struct@@@Z ; AHCI_Controller::find_empty_slot
	mov	DWORD PTR _slot$[ebp], eax
; Line 190
	cmp	DWORD PTR _slot$[ebp], -1
	jne	SHORT $LN9@Write
	push	OFFSET $SG3318
	call	_printf
	add	esp, 4
	mov	eax, 4
	jmp	$LN1@Write
$LN9@Write:
; Line 192
	mov	ecx, DWORD PTR _port$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cmd$[ebp], edx
; Line 193
	mov	eax, DWORD PTR _slot$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _cmd$[ebp], eax
; Line 194
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	dl, BYTE PTR [ecx]
	and	dl, 224					; 000000e0H
	or	dl, 5
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR [eax], dl
; Line 195
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	dl, BYTE PTR [ecx]
	and	dl, 191					; 000000bfH
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR [eax], dl
; Line 196
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	shr	ecx, 4
	movzx	edx, cx
	add	edx, 1
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 198
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _cmdtbl$[ebp], edx
; Line 199
	mov	eax, DWORD PTR _cmd$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	sub	ecx, 1
	shl	ecx, 4
	add	ecx, 144				; 00000090H
	push	ecx
	push	0
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 202
	mov	DWORD PTR _i$[ebp], 0
; Line 203
	jmp	SHORT $LN4@Write
$LN2@Write:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Write:
	mov	ecx, DWORD PTR _cmd$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	sub	edx, 1
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN3@Write
; Line 205
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+eax+128], edx
; Line 206
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	edx, DWORD PTR [ecx+eax+140]
	and	edx, -4194304				; ffc00000H
	or	edx, 8192				; 00002000H
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [ecx+eax+140], edx
; Line 207
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	ecx, DWORD PTR [eax+edx+140]
	or	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [eax+edx+140], ecx
; Line 208
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 4096				; 00001000H
	mov	DWORD PTR _buf$[ebp], ecx
; Line 209
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR _count$[ebp], edx
; Line 210
	jmp	$LN2@Write
$LN3@Write:
; Line 212
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+eax+128], edx
; Line 213
	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	and	eax, 4194303				; 003fffffH
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+140]
	and	ecx, -4194304				; ffc00000H
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [eax+edx+140], ecx
; Line 214
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	eax, DWORD PTR [edx+ecx+140]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [edx+ecx+140], eax
; Line 217
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR _cmdfis$[ebp], eax
; Line 219
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [ecx], 39			; 00000027H
; Line 220
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	al, BYTE PTR [edx+1]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 221
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [edx+2], 53			; 00000035H
; Line 223
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	cl, BYTE PTR _startl$[ebp]
	mov	BYTE PTR [eax+4], cl
; Line 224
	mov	edx, DWORD PTR _startl$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [eax+5], dl
; Line 225
	mov	ecx, DWORD PTR _startl$[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [edx+6], cl
; Line 226
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [eax+7], 64			; 00000040H
; Line 228
	mov	ecx, DWORD PTR _startl$[ebp]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 229
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	cl, BYTE PTR _starth$[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 230
	mov	edx, DWORD PTR _starth$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [eax+10], dl
; Line 232
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	dl, BYTE PTR _count$[ebp]
	mov	BYTE PTR [ecx+12], dl
; Line 233
	mov	eax, DWORD PTR _count$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [ecx+13], al
$LN5@Write:
; Line 236
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 136				; 00000088H
	je	SHORT $LN6@Write
	cmp	DWORD PTR _spin$[ebp], 1000000		; 000f4240H
	jge	SHORT $LN6@Write
; Line 238
	mov	ecx, DWORD PTR _spin$[ebp]
	add	ecx, 1
	mov	DWORD PTR _spin$[ebp], ecx
; Line 239
	jmp	SHORT $LN5@Write
$LN6@Write:
; Line 240
	cmp	DWORD PTR _spin$[ebp], 1000000		; 000f4240H
	jne	SHORT $LN10@Write
; Line 242
	push	OFFSET $SG3320
	call	_printf
	add	esp, 4
; Line 243
	mov	eax, 5
	jmp	$LN1@Write
$LN10@Write:
; Line 246
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _port$[ebp]
	mov	DWORD PTR [eax+56], edx
$LN7@Write:
; Line 249
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN8@Write
; Line 253
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	and	ecx, edx
	jne	SHORT $LN11@Write
; Line 254
	jmp	SHORT $LN8@Write
$LN11@Write:
; Line 255
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN12@Write
; Line 257
	push	OFFSET $SG3323
	call	_printf
	add	esp, 4
; Line 258
	mov	eax, 6
	jmp	SHORT $LN1@Write
$LN12@Write:
; Line 260
	jmp	SHORT $LN7@Write
$LN8@Write:
; Line 263
	mov	ecx, DWORD PTR _port$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1073741824				; 40000000H
	je	SHORT $LN13@Write
; Line 265
	push	OFFSET $SG3325
	call	_printf
	add	esp, 4
; Line 266
	mov	eax, 6
	jmp	SHORT $LN1@Write
$LN13@Write:
; Line 269
	push	OFFSET $SG3326
	call	_printf
	add	esp, 4
; Line 270
	xor	eax, eax
$LN1@Write:
; Line 271
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Write@AHCI_Controller@@QAE?AW4AHCIResult@@EIIIPAX@Z ENDP ; AHCI_Controller::Write
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -36						; size = 4
_slot$ = -32						; size = 4
_spin$ = -28						; size = 4
_buf$ = -24						; size = 4
_port$ = -20						; size = 4
_cmd$ = -16						; size = 4
_cmdtbl$ = -12						; size = 4
_cmdfis$ = -8						; size = 4
_i$ = -4						; size = 4
_port_num$ = 8						; size = 1
_startl$ = 12						; size = 4
_starth$ = 16						; size = 4
_count$ = 20						; size = 4
__buf$ = 24						; size = 4
?Read@AHCI_Controller@@QAE?AW4AHCIResult@@EIIIPAX@Z PROC ; AHCI_Controller::Read
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR _port_num$[ebp]
	shl	edx, 7
	lea	eax, DWORD PTR [ecx+edx+256]
	mov	DWORD PTR _port$[ebp], eax
; Line 91
	mov	ecx, DWORD PTR __buf$[ebp]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 93
	mov	edx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+16], -1
; Line 94
	mov	DWORD PTR _spin$[ebp], 0
; Line 96
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find_empty_slot@AHCI_Controller@@QAEHPCUHBA_PORT_struct@@@Z ; AHCI_Controller::find_empty_slot
	mov	DWORD PTR _slot$[ebp], eax
; Line 98
	cmp	DWORD PTR _slot$[ebp], -1
	jne	SHORT $LN9@Read
	push	OFFSET $SG3266
	call	_printf
	add	esp, 4
	mov	eax, 5
	jmp	$LN1@Read
$LN9@Read:
; Line 100
	mov	ecx, DWORD PTR _port$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cmd$[ebp], edx
; Line 101
	mov	eax, DWORD PTR _slot$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _cmd$[ebp], eax
; Line 102
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	dl, BYTE PTR [ecx]
	and	dl, 224					; 000000e0H
	or	dl, 5
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR [eax], dl
; Line 103
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	dl, BYTE PTR [ecx]
	and	dl, 191					; 000000bfH
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR [eax], dl
; Line 104
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	shr	ecx, 4
	movzx	edx, cx
	add	edx, 1
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 106
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _cmdtbl$[ebp], edx
; Line 107
	mov	eax, DWORD PTR _cmd$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	sub	ecx, 1
	shl	ecx, 4
	add	ecx, 144				; 00000090H
	push	ecx
	push	0
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 111
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Read
$LN2@Read:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Read:
	mov	ecx, DWORD PTR _cmd$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	sub	edx, 1
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN3@Read
; Line 113
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+eax+128], edx
; Line 114
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	edx, DWORD PTR [ecx+eax+140]
	and	edx, -4194304				; ffc00000H
	or	edx, 8192				; 00002000H
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [ecx+eax+140], edx
; Line 115
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	ecx, DWORD PTR [eax+edx+140]
	or	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [eax+edx+140], ecx
; Line 116
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 4096				; 00001000H
	mov	DWORD PTR _buf$[ebp], ecx
; Line 117
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR _count$[ebp], edx
; Line 118
	jmp	$LN2@Read
$LN3@Read:
; Line 120
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmdtbl$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+eax+128], edx
; Line 121
	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	and	eax, 4194303				; 003fffffH
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+140]
	and	ecx, -4194304				; ffc00000H
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [eax+edx+140], ecx
; Line 122
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	eax, DWORD PTR [edx+ecx+140]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR [edx+ecx+140], eax
; Line 125
	mov	eax, DWORD PTR _cmdtbl$[ebp]
	mov	DWORD PTR _cmdfis$[ebp], eax
; Line 127
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [ecx], 39			; 00000027H
; Line 128
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	al, BYTE PTR [edx+1]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 129
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [edx+2], 37			; 00000025H
; Line 131
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	cl, BYTE PTR _startl$[ebp]
	mov	BYTE PTR [eax+4], cl
; Line 132
	mov	edx, DWORD PTR _startl$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [eax+5], dl
; Line 133
	mov	ecx, DWORD PTR _startl$[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [edx+6], cl
; Line 134
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [eax+7], 64			; 00000040H
; Line 136
	mov	ecx, DWORD PTR _startl$[ebp]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 137
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	cl, BYTE PTR _starth$[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 138
	mov	edx, DWORD PTR _starth$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [eax+10], dl
; Line 140
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	dl, BYTE PTR _count$[ebp]
	mov	BYTE PTR [ecx+12], dl
; Line 141
	mov	eax, DWORD PTR _count$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _cmdfis$[ebp]
	mov	BYTE PTR [ecx+13], al
$LN5@Read:
; Line 144
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 136				; 00000088H
	je	SHORT $LN6@Read
	cmp	DWORD PTR _spin$[ebp], 1000000		; 000f4240H
	jge	SHORT $LN6@Read
; Line 146
	mov	ecx, DWORD PTR _spin$[ebp]
	add	ecx, 1
	mov	DWORD PTR _spin$[ebp], ecx
; Line 147
	jmp	SHORT $LN5@Read
$LN6@Read:
; Line 148
	cmp	DWORD PTR _spin$[ebp], 1000000		; 000f4240H
	jne	SHORT $LN10@Read
; Line 150
	push	OFFSET $SG3268
	call	_printf
	add	esp, 4
; Line 151
	mov	eax, 5
	jmp	SHORT $LN1@Read
$LN10@Read:
; Line 154
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _port$[ebp]
	mov	DWORD PTR [eax+56], edx
$LN7@Read:
; Line 157
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN8@Read
; Line 161
	mov	edx, 1
	mov	ecx, DWORD PTR _slot$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	and	ecx, edx
	jne	SHORT $LN11@Read
; Line 162
	jmp	SHORT $LN8@Read
$LN11@Read:
; Line 163
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN12@Read
; Line 165
	push	OFFSET $SG3271
	call	_printf
	add	esp, 4
; Line 166
	mov	eax, 6
	jmp	SHORT $LN1@Read
$LN12@Read:
; Line 168
	jmp	SHORT $LN7@Read
$LN8@Read:
; Line 171
	mov	ecx, DWORD PTR _port$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1073741824				; 40000000H
	je	SHORT $LN13@Read
; Line 173
	push	OFFSET $SG3273
	call	_printf
	add	esp, 4
; Line 174
	mov	eax, 6
	jmp	SHORT $LN1@Read
$LN13@Read:
; Line 177
	xor	eax, eax
$LN1@Read:
; Line 178
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Read@AHCI_Controller@@QAE?AW4AHCIResult@@EIIIPAX@Z ENDP ; AHCI_Controller::Read
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -16						; size = 4
_cmd$ = -12						; size = 4
_i$1 = -8						; size = 4
_port$ = -4						; size = 4
_port_num$ = 8						; size = 1
?port_rebase@AHCI_Controller@@QAEXE@Z PROC		; AHCI_Controller::port_rebase
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 54
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR _port_num$[ebp]
	shl	edx, 7
	lea	eax, DWORD PTR [ecx+edx+256]
	mov	DWORD PTR _port$[ebp], eax
; Line 56
	mov	ecx, DWORD PTR _port$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop_cmd@AHCI_Controller@@QAEXPCUHBA_PORT_struct@@@Z ; AHCI_Controller::stop_cmd
; Line 61
	movzx	edx, BYTE PTR _port_num$[ebp]
	shl	edx, 10					; 0000000aH
	add	edx, 5242880				; 00500000H
	mov	eax, DWORD PTR _port$[ebp]
	mov	DWORD PTR [eax], edx
; Line 62
	mov	ecx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 63
	push	1024					; 00000400H
	push	0
	mov	edx, DWORD PTR _port$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 67
	movzx	ecx, BYTE PTR _port_num$[ebp]
	shl	ecx, 8
	add	ecx, 5275648				; 00508000H
	mov	edx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 68
	mov	eax, DWORD PTR _port$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 69
	push	256					; 00000100H
	push	0
	mov	ecx, DWORD PTR _port$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 73
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cmd$[ebp], ecx
; Line 74
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@port_rebas
$LN2@port_rebas:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@port_rebas:
	cmp	DWORD PTR _i$1[ebp], 32			; 00000020H
	jge	SHORT $LN3@port_rebas
; Line 76
	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 5
	mov	ecx, 8
	mov	edx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [edx+eax+2], cx
; Line 78
	movzx	eax, BYTE PTR _port_num$[ebp]
	shl	eax, 13					; 0000000dH
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 8
	lea	edx, DWORD PTR [eax+ecx+5283840]
	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR [ecx+eax+8], edx
; Line 79
	mov	edx, DWORD PTR _i$1[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
; Line 80
	push	256					; 00000100H
	push	0
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _cmd$[ebp]
	mov	eax, DWORD PTR [edx+ecx+8]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 81
	jmp	SHORT $LN2@port_rebas
$LN3@port_rebas:
; Line 83
	mov	ecx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 85
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?start_cmd@AHCI_Controller@@QAEXPCUHBA_PORT_struct@@@Z ; AHCI_Controller::start_cmd
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	4
?port_rebase@AHCI_Controller@@QAEXE@Z ENDP		; AHCI_Controller::port_rebase
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -4						; size = 4
__abar$ = 8						; size = 4
??0AHCI_Controller@@QAE@PCUHBA_MEM_struct@@@Z PROC	; AHCI_Controller::AHCI_Controller
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 11
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __abar$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 13
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0AHCI_Controller@@QAE@PCUHBA_MEM_struct@@@Z ENDP	; AHCI_Controller::AHCI_Controller
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0AHCI_Controller@@QAE@XZ PROC				; AHCI_Controller::AHCI_Controller
; _this$ = ecx
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\ahci.cpp
; Line 6
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?ab@@3PCUHBA_MEM_struct@@C ; ab
	mov	DWORD PTR [eax], ecx
; Line 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0AHCI_Controller@@QAE@XZ ENDP				; AHCI_Controller::AHCI_Controller
_TEXT	ENDS
END
