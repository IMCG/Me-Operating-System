; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\Users\michalis\Documents\Visual Studio 2015\Projects\MeOS\MeOS\PCI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ab@@3PCUHBA_MEM_struct@@C			; ab
_BSS	SEGMENT
?ab@@3PCUHBA_MEM_struct@@C DD 01H DUP (?)		; ab
_BSS	ENDS
CONST	SEGMENT
$SG3203	DB	'SATA at port: %u with %h', 0aH, 00H
	ORG $+2
$SG3206	DB	'PM at port: %u', 0aH, 00H
$SG3209	DB	'ATAPI at port: %u', 0aH, 00H
	ORG $+1
$SG3212	DB	'SEMB at port: %u', 0aH, 00H
	ORG $+2
$SG3213	DB	'No drive found at port: %u', 0aH, 00H
$SG3229	DB	'%u %u %h %h %h %u %h', 0aH, 00H
	ORG $+2
$SG3232	DB	'%u %u %h %h %h %u', 0aH, 00H
CONST	ENDS
PUBLIC	_PCIReadRegister
PUBLIC	_check_type
PUBLIC	_check
PUBLIC	_CheckAHCIType
PUBLIC	_PCIFindAHCI
EXTRN	_inportl:PROC
EXTRN	_outportl:PROC
EXTRN	_printf:PROC
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_bus$ = -8						; size = 2
_headerType$1 = -3					; size = 1
_function$2 = -2					; size = 1
_device$ = -1						; size = 1
_PCIFindAHCI PROC
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\pci.cpp
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 68
	xor	eax, eax
	mov	WORD PTR _bus$[ebp], ax
; Line 69
	mov	BYTE PTR _device$[ebp], 0
; Line 71
	jmp	SHORT $LN4@PCIFindAHC
$LN2@PCIFindAHC:
	mov	cx, WORD PTR _bus$[ebp]
	add	cx, 1
	mov	WORD PTR _bus$[ebp], cx
$LN4@PCIFindAHC:
	movzx	edx, WORD PTR _bus$[ebp]
	cmp	edx, 256				; 00000100H
	jge	$LN1@PCIFindAHC
; Line 73
	jmp	SHORT $LN7@PCIFindAHC
$LN5@PCIFindAHC:
	mov	al, BYTE PTR _device$[ebp]
	add	al, 1
	mov	BYTE PTR _device$[ebp], al
$LN7@PCIFindAHC:
	movzx	ecx, BYTE PTR _device$[ebp]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN6@PCIFindAHC
; Line 75
	push	0
	movzx	edx, BYTE PTR _device$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bus$[ebp]
	push	eax
	call	_check
	add	esp, 12					; 0000000cH
; Line 77
	push	12					; 0000000cH
	push	0
	movzx	ecx, BYTE PTR _device$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bus$[ebp]
	push	edx
	call	_PCIReadRegister
	add	esp, 16					; 00000010H
	shr	eax, 16					; 00000010H
	movzx	eax, al
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _headerType$1[ebp], al
; Line 78
	mov	BYTE PTR _function$2[ebp], 0
; Line 80
	movzx	ecx, BYTE PTR _headerType$1[ebp]
	and	ecx, 128				; 00000080H
	je	SHORT $LN11@PCIFindAHC
; Line 82
	mov	BYTE PTR _function$2[ebp], 1
	jmp	SHORT $LN10@PCIFindAHC
$LN8@PCIFindAHC:
	mov	dl, BYTE PTR _function$2[ebp]
	add	dl, 1
	mov	BYTE PTR _function$2[ebp], dl
$LN10@PCIFindAHC:
	movzx	eax, BYTE PTR _function$2[ebp]
	cmp	eax, 8
	jge	SHORT $LN11@PCIFindAHC
; Line 83
	movzx	ecx, BYTE PTR _function$2[ebp]
	push	ecx
	movzx	edx, BYTE PTR _device$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bus$[ebp]
	push	eax
	call	_check
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@PCIFindAHC
$LN11@PCIFindAHC:
; Line 85
	jmp	$LN5@PCIFindAHC
$LN6@PCIFindAHC:
; Line 86
	jmp	$LN2@PCIFindAHC
$LN1@PCIFindAHC:
; Line 87
	mov	esp, ebp
	pop	ebp
	ret	0
_PCIFindAHCI ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_pi$ = -12						; size = 4
_dt$1 = -8						; size = 4
_i$ = -4						; size = 4
__abar$ = 8						; size = 4
_CheckAHCIType PROC
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\pci.cpp
; Line 6
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 7
	mov	eax, DWORD PTR __abar$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pi$[ebp], ecx
; Line 9
	mov	DWORD PTR _i$[ebp], 0
$LN2@CheckAHCIT:
; Line 10
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jae	$LN3@CheckAHCIT
; Line 12
	mov	edx, DWORD PTR _pi$[ebp]
	and	edx, 1
	je	$LN4@CheckAHCIT
; Line 14
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR __abar$[ebp]
	lea	edx, DWORD PTR [ecx+eax+256]
	push	edx
	call	_check_type
	add	esp, 4
	mov	DWORD PTR _dt$1[ebp], eax
; Line 16
	cmp	DWORD PTR _dt$1[ebp], 4
	jne	SHORT $LN5@CheckAHCIT
; Line 18
	mov	eax, DWORD PTR ?ab@@3PCUHBA_MEM_struct@@C ; ab
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 20					; 00000014H
	and	ecx, 15					; 0000000fH
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET $SG3203
	call	_printf
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR __abar$[ebp]
	mov	DWORD PTR ?ab@@3PCUHBA_MEM_struct@@C, eax ; ab
	mov	eax, 1
	jmp	SHORT $LN1@CheckAHCIT
	jmp	SHORT $LN4@CheckAHCIT
$LN5@CheckAHCIT:
; Line 20
	cmp	DWORD PTR _dt$1[ebp], 3
	jne	SHORT $LN7@CheckAHCIT
; Line 21
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG3206
	call	_printf
	add	esp, 8
	jmp	SHORT $LN4@CheckAHCIT
$LN7@CheckAHCIT:
; Line 22
	cmp	DWORD PTR _dt$1[ebp], 1
	jne	SHORT $LN9@CheckAHCIT
; Line 23
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET $SG3209
	call	_printf
	add	esp, 8
	jmp	SHORT $LN4@CheckAHCIT
$LN9@CheckAHCIT:
; Line 24
	cmp	DWORD PTR _dt$1[ebp], 2
	jne	SHORT $LN11@CheckAHCIT
; Line 25
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG3212
	call	_printf
	add	esp, 8
; Line 26
	jmp	SHORT $LN4@CheckAHCIT
$LN11@CheckAHCIT:
; Line 27
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG3213
	call	_printf
	add	esp, 8
$LN4@CheckAHCIT:
; Line 30
	mov	edx, DWORD PTR _pi$[ebp]
	shr	edx, 1
	mov	DWORD PTR _pi$[ebp], edx
; Line 31
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 32
	jmp	$LN2@CheckAHCIT
$LN3@CheckAHCIT:
; Line 34
	xor	eax, eax
$LN1@CheckAHCIT:
; Line 35
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckAHCIType ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_pbase$1 = -16						; size = 4
_base$2 = -12						; size = 4
_reg$ = -8						; size = 4
_cls$ = -3						; size = 1
_subcls$ = -2						; size = 1
_progif$ = -1						; size = 1
_bus$ = 8						; size = 1
_device$ = 12						; size = 1
_function$ = 16						; size = 1
_check	PROC
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\pci.cpp
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 39
	push	0
	movzx	eax, BYTE PTR _function$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _device$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bus$[ebp]
	push	edx
	call	_PCIReadRegister
	add	esp, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN2@check
; Line 40
	xor	eax, eax
	jmp	$LN1@check
$LN2@check:
; Line 42
	push	8
	movzx	eax, BYTE PTR _function$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _device$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bus$[ebp]
	push	edx
	call	_PCIReadRegister
	add	esp, 16					; 00000010H
	mov	DWORD PTR _reg$[ebp], eax
; Line 44
	mov	eax, DWORD PTR _reg$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _cls$[ebp], al
; Line 45
	mov	ecx, DWORD PTR _reg$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _subcls$[ebp], cl
; Line 46
	mov	edx, DWORD PTR _reg$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _progif$[ebp], dl
; Line 48
	movzx	eax, BYTE PTR _cls$[ebp]
	cmp	eax, 1
	jne	$LN3@check
	movzx	ecx, BYTE PTR _subcls$[ebp]
	cmp	ecx, 6
	jne	SHORT $LN3@check
	movzx	edx, BYTE PTR _progif$[ebp]
	cmp	edx, 1
	jne	SHORT $LN3@check
; Line 50
	push	36					; 00000024H
	movzx	eax, BYTE PTR _function$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _device$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bus$[ebp]
	push	edx
	call	_PCIReadRegister
	add	esp, 16					; 00000010H
	mov	DWORD PTR _base$2[ebp], eax
; Line 51
	mov	eax, DWORD PTR _base$2[ebp]
	push	eax
	movzx	ecx, BYTE PTR _function$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _progif$[ebp]
	push	edx
	movzx	eax, BYTE PTR _subcls$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _cls$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _device$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bus$[ebp]
	push	eax
	push	OFFSET $SG3229
	call	_printf
	add	esp, 32					; 00000020H
; Line 53
	mov	ecx, DWORD PTR _base$2[ebp]
	mov	DWORD PTR _pbase$1[ebp], ecx
; Line 55
	mov	edx, DWORD PTR _pbase$1[ebp]
	push	edx
	call	_CheckAHCIType
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN5@check
; Line 56
	mov	eax, 1
	jmp	SHORT $LN1@check
; Line 57
	jmp	SHORT $LN6@check
$LN5@check:
; Line 58
	xor	eax, eax
	jmp	SHORT $LN1@check
$LN6@check:
; Line 60
	jmp	SHORT $LN1@check
$LN3@check:
; Line 62
	movzx	eax, BYTE PTR _function$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _progif$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _subcls$[ebp]
	push	edx
	movzx	eax, BYTE PTR _cls$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _device$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bus$[ebp]
	push	edx
	push	OFFSET $SG3232
	call	_printf
	add	esp, 28					; 0000001cH
	xor	eax, eax
$LN1@check:
; Line 64
	mov	esp, ebp
	pop	ebp
	ret	0
_check	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_ssts$ = -12						; size = 4
tv76 = -8						; size = 4
_ipm$ = -2						; size = 1
_det$ = -1						; size = 1
_port$ = 8						; size = 4
_check_type PROC
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\pci.cpp
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 108
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _ssts$[ebp], ecx
; Line 110
	mov	edx, DWORD PTR _ssts$[ebp]
	shr	edx, 8
	and	edx, 15					; 0000000fH
	mov	BYTE PTR _ipm$[ebp], dl
; Line 111
	mov	eax, DWORD PTR _ssts$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _det$[ebp], al
; Line 113
	movzx	ecx, BYTE PTR _det$[ebp]
	cmp	ecx, 3
	je	SHORT $LN4@check_type
; Line 114
	xor	eax, eax
	jmp	SHORT $LN1@check_type
$LN4@check_type:
; Line 115
	movzx	edx, BYTE PTR _ipm$[ebp]
	cmp	edx, 1
	je	SHORT $LN5@check_type
; Line 116
	xor	eax, eax
	jmp	SHORT $LN1@check_type
$LN5@check_type:
; Line 118
	mov	eax, DWORD PTR _port$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], -1771503359	; 96690101H
	je	SHORT $LN8@check_type
	cmp	DWORD PTR tv76[ebp], -1019477759	; c33c0101H
	je	SHORT $LN7@check_type
	cmp	DWORD PTR tv76[ebp], -351010559		; eb140101H
	je	SHORT $LN6@check_type
	jmp	SHORT $LN9@check_type
$LN6@check_type:
; Line 121
	mov	eax, 1
	jmp	SHORT $LN1@check_type
$LN7@check_type:
; Line 123
	mov	eax, 2
	jmp	SHORT $LN1@check_type
$LN8@check_type:
; Line 125
	mov	eax, 3
	jmp	SHORT $LN1@check_type
$LN9@check_type:
; Line 127
	mov	eax, 4
$LN1@check_type:
; Line 129
	mov	esp, ebp
	pop	ebp
	ret	0
_check_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_temp$ = -20						; size = 4
_address$ = -16						; size = 4
_lfunc$ = -12						; size = 4
_lslot$ = -8						; size = 4
_lbus$ = -4						; size = 4
_bus$ = 8						; size = 1
_slot$ = 12						; size = 1
_func$ = 16						; size = 1
_offset$ = 20						; size = 1
_PCIReadRegister PROC
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\pci.cpp
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 93
	movzx	eax, BYTE PTR _bus$[ebp]
	mov	DWORD PTR _lbus$[ebp], eax
; Line 94
	movzx	ecx, BYTE PTR _slot$[ebp]
	mov	DWORD PTR _lslot$[ebp], ecx
; Line 95
	movzx	edx, BYTE PTR _func$[ebp]
	mov	DWORD PTR _lfunc$[ebp], edx
; Line 97
	mov	eax, DWORD PTR _lbus$[ebp]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _lslot$[ebp]
	shl	ecx, 11					; 0000000bH
	or	eax, ecx
	mov	edx, DWORD PTR _lfunc$[ebp]
	shl	edx, 8
	or	eax, edx
	movzx	ecx, BYTE PTR _offset$[ebp]
	and	ecx, 252				; 000000fcH
	or	eax, ecx
	or	eax, -2147483648			; 80000000H
	mov	DWORD PTR _address$[ebp], eax
; Line 100
	mov	edx, DWORD PTR _address$[ebp]
	push	edx
	push	3320					; 00000cf8H
	call	_outportl
	add	esp, 8
; Line 102
	push	3324					; 00000cfcH
	call	_inportl
	add	esp, 4
	mov	DWORD PTR _temp$[ebp], eax
; Line 103
	mov	eax, DWORD PTR _temp$[ebp]
; Line 104
	mov	esp, ebp
	pop	ebp
	ret	0
_PCIReadRegister ENDP
_TEXT	ENDS
END
