; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\Users\michalis\Documents\Visual Studio 2015\Projects\MeOS\MeOS\cstring.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_strlength
PUBLIC	_strEqual
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_size$ = -12						; size = 2
_i$1 = -8						; size = 2
_result$ = -1						; size = 1
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_strEqual PROC
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\cstring.c
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
; Line 14
	mov	BYTE PTR _result$[ebp], 1
; Line 15
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_strlength
	add	esp, 4
	mov	WORD PTR _size$[ebp], ax
; Line 17
	movzx	esi, WORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	call	_strlength
	add	esp, 4
	movzx	edx, ax
	cmp	esi, edx
	je	SHORT $LN5@strEqual
; Line 18
	mov	BYTE PTR _result$[ebp], 0
	jmp	SHORT $LN6@strEqual
$LN5@strEqual:
; Line 21
	xor	eax, eax
	mov	WORD PTR _i$1[ebp], ax
; Line 22
	jmp	SHORT $LN4@strEqual
$LN2@strEqual:
	mov	cx, WORD PTR _i$1[ebp]
	add	cx, 1
	mov	WORD PTR _i$1[ebp], cx
$LN4@strEqual:
	movzx	edx, WORD PTR _i$1[ebp]
	movzx	eax, WORD PTR _size$[ebp]
	cmp	edx, eax
	jge	SHORT $LN6@strEqual
; Line 24
	movzx	ecx, WORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _s1$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	movzx	ecx, WORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _s2$[ebp]
	movsx	ecx, BYTE PTR [edx+ecx]
	cmp	eax, ecx
	je	SHORT $LN7@strEqual
; Line 26
	mov	BYTE PTR _result$[ebp], 0
; Line 27
	jmp	SHORT $LN6@strEqual
$LN7@strEqual:
; Line 29
	jmp	SHORT $LN2@strEqual
$LN6@strEqual:
; Line 32
	mov	al, BYTE PTR _result$[ebp]
; Line 33
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_strEqual ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
_TEXT	SEGMENT
_i$ = -4						; size = 2
_ch$ = 8						; size = 4
_strlength PROC
; File c:\users\michalis\documents\visual studio 2015\projects\meos\meos\cstring.c
; Line 4
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 5
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
$LN2@strlength:
; Line 6
	movzx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ch$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN3@strlength
; Line 7
	mov	cx, WORD PTR _i$[ebp]
	add	cx, 1
	mov	WORD PTR _i$[ebp], cx
	jmp	SHORT $LN2@strlength
$LN3@strlength:
; Line 9
	mov	ax, WORD PTR _i$[ebp]
; Line 10
	mov	esp, ebp
	pop	ebp
	ret	0
_strlength ENDP
_TEXT	ENDS
END
